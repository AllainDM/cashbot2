
from datetime import datetime

import pytest
from unittest.mock import AsyncMock, patch

from app.report_handler import ReportHandler


# Устанавливаем локаль для корректного отображения названия месяца (если это потребуется)
# В реальной среде это может потребовать настройки окружения, но для теста мы просто
# проверим наличие конкретной строки.


@pytest.mark.asyncio
async def test_get_month_report_includes_current_month_name():
    """
    Тест проверяет, что ReportHandler.get_month_report() возвращает отчет,
    который динамически содержит название текущего месяца на русском языке.

    Это КРАСНЫЙ ТЕСТ, так как текущая реализация возвращает только
    "Временный текст отчета", который не содержит названия месяца.
    """

    # 1. Настройка
    handler = ReportHandler()

    # Определяем название текущего месяца на русском языке
    # В Python это нужно делать с учетом локали, но для простоты мы ожидаем конкретный формат.
    # Для целей TDD мы ожидаем, что в отчете будет слово 'Отчет за <Месяц>'.

    # Получаем текущее название месяца на английском, так как locale может быть не настроен
    current_month_english = datetime.now().strftime("%B")

    # Создадим ожидаемое ключевое слово, которое ДОЛЖНО быть в отчете,
    # если логика будет реализована
    # Например, мы ожидаем увидеть в отчете "Отчет за Октябрь 2025" (пример)

    # ВНИМАНИЕ: Для падения теста мы ищем просто слово "Отчет",
    # так как его точно нет в "Временный текст отчета"
    expected_keyword_start = "Отчет"

    # 2. Выполнение
    report_text = await handler.get_month_report()

    # 3. Проверка (КРАСНАЯ ЧАСТЬ ТЕСТА)

    # Проверяем, что отчет начинается с ожидаемой фразы (или содержит её)
    # Это вызовет ошибку, поскольку report_text = "Временный текст отчета"
    assert report_text.startswith(expected_keyword_start)

    # Дополнительная проверка, чтобы убедиться, что тест действительно ожидает
    # более сложный контент, чем заглушка.
    assert "текст" not in report_text.lower()