
from datetime import datetime

import pytest
from aiogram import types
from unittest.mock import AsyncMock, patch, Mock

from config import MONTH_MAP
from app.report_handler import ReportHandler


# –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ Message
def create_mock_message(text: str) -> types.Message:
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è aiogram.types.Message."""
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è id)
    mock_user = Mock(id=12345, full_name="Test User")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    mock_message = Mock(spec=types.Message)
    # –ù–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —É —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã:
    mock_message.text = text
    mock_message.from_user = mock_user
    # –ï—Å–ª–∏ ReportHandler –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message.reply, –µ–≥–æ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –∑–∞–º–æ–∫–∞—Ç—å
    mock_message.reply = AsyncMock()

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏ chat, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # mock_message.chat = Mock(id=111, type='private')

    return mock_message


@pytest.mark.asyncio
async def test_reply_is_called_when_month_is_missing():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–µ—Å—è—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ (/report),
    –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ message.reply().
    """

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞.
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–µ–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: /report
    mock_message = create_mock_message("/report")

    # –ú–û–ö –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î (–ø–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ–≥–æ Mock)
    mock_db_conn = Mock()

    # –ú–û–ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ CRUD
    mock_crud_func = AsyncMock(return_value=[])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    handler = ReportHandler(message=mock_message, db_conn=mock_db_conn, crud_func=mock_crud_func)

    # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Å—è—Ü–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    # –ú—ã –º–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å _get_month –Ω–∞–ø—Ä—è–º—É—é, –∏–ª–∏ —á–µ—Ä–µ–∑ get_month_report
    # –ü–æ—Å–∫–æ–ª—å–∫—É _get_month —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—ã–∑–æ–≤–µ–º –µ–≥–æ.
    await handler._get_month()

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.reply –±—ã–ª –≤—ã–∑–≤–∞–Ω.
    mock_message.reply.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.reply –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ä–æ–≤–Ω–æ 1 —Ä–∞–∑. –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã—à–µ.
    # assert mock_message.reply.call_count == 1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –æ–∂–∏–¥–∞—Ç—å
    current_month_number = datetime.now().month
    # –ù–∞—Ö–æ–¥–∏–º –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    expected_month_name = list(MONTH_MAP.keys())[list(MONTH_MAP.values()).index(current_month_number)].capitalize()
    expected_year = datetime.now().year

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    expected_text = f"–ú–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ {expected_month_name} {expected_year} –≥–æ–¥–∞."

    mock_message.reply.assert_called_with(expected_text)


@pytest.mark.asyncio
async def test_get_month_report_includes_current_month_name():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ ReportHandler.get_month_report() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç.
    –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤—ã–º —Å–ª–æ–≤–∞–º –æ—Ç—á–µ—Ç–∞.
    """

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞.
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–º–∏—Ç–∏—Ä—É—é—â–µ–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: /report
    mock_message = create_mock_message("/report –ò—é–ª—å")

    # –ú–û–ö –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î (–ø–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ–≥–æ Mock)
    mock_db_conn = Mock()

    # –ú–æ–∫-—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã ReportHandler –º–æ–≥ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏
    mock_crud_func = AsyncMock(return_value=[
        {"summ": 1100, "category": "–ï–¥–∞"},
        {"summ": 900, "category": "–ï–¥–∞"},
        {"summ": 800, "category": "–ü—Ä–æ–¥—É–∫—Ç—ã"}
    ])

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏–µ.
    handler = ReportHandler(message=mock_message, db_conn=mock_db_conn, crud_func=mock_crud_func)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    # current_month_english = datetime.now().strftime("%B")
    # print(f"current_month_english {current_month_english}")

    # –°–æ–∑–¥–∞–¥–∏–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –î–û–õ–ñ–ù–û –±—ã—Ç—å –≤ –æ—Ç—á–µ—Ç–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º—ã –æ–∂–∏–¥–∞–µ–º —É–≤–∏–¥–µ—Ç—å –≤ –æ—Ç—á–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –û–∫—Ç—è–±—Ä—å 2025 –≥–æ–¥–∞"
    expected_keyword_start = "–í–∞—à –æ—Ç—á–µ—Ç –∑–∞"

    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ReportHandler
    report_year = 2025

    # –û–∂–∏–¥–∞–µ–º—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏–∑ _send_report
    expected_full_report = (
        f"–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –ò—é–ª—å {report_year} –≥–æ–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        f"üè∑Ô∏è –ï–¥–∞: 2000 —Ä—É–±.\n"  
        f"üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã: 800 —Ä—É–±.\n"  
        f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: 2800 —Ä—É–±."
    )

    # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    report_text = await handler.get_month_report()

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–∂–∏–¥–∞–µ–º–æ–π —Ñ—Ä–∞–∑—ã (–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ—ë)
    assert report_text.startswith(expected_keyword_start)

    assert report_text.strip() == expected_full_report.strip()

    # assert (("–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ –ò—é–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
    #         "üè∑Ô∏è –ï–¥–∞: 2000 —Ä—É–±.\n"
    #         "üè∑Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã: 800 —Ä—É–±.\n"
    #         "\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: 2800 —Ä—É–±."
    #          )
    #         in report_text)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ—Ç
    # –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —á–µ–º –∑–∞–≥–ª—É—à–∫–∞.
    assert "—Ç–µ–∫—Å—Ç" not in report_text.lower()
