from datetime import datetime
from typing import Callable, Awaitable, Any, Dict, List

import aiosqlite
from aiogram import types

from config import MONTH_MAP


class ReportHandler:
    def __init__(self, message: types.Message, db_conn: aiosqlite.Connection,
                 crud_func: Callable[..., Awaitable[List[Dict[str, Any]]]]):
        self.message = message                      # –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–≥, –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∏–¥ —é–∑–µ—Ä–∞.
        self.month_name = None                      # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
        self.month_number = None                    # –ù–æ–º–µ—Ä –º–µ—Å—è—Ü–∞(1-12) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ—Ç—á–µ—Ç–∞
        self.current_year = None                    # –ì–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ—Ç—á–µ—Ç–∞.
        self.user_id = self.message.from_user.id    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        self.db_conn = db_conn                      # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        self.crud_func = crud_func                  # –§—É–Ω–∫—Ü–∏—è –∏–∑ CRUD.
        self.notes = None                           # –ó–∞–ø–∏—Å–∏ –∏–∑ –ë–î –ø–æ –Ω–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.
        self.category_sums = {}                     # –°–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.report_text = None                     # –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async def get_month_report(self):
        # –ü–æ–ª—É—á–∏–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
        await self._get_month()
        if self.month_number is None:
            return None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î
        await self._get_notes()
        if not self.notes:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –∑–∞–ø–∏—Å–∏. _get_notes() —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
            return None

        # –°–±–æ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await self._process_notes()
        if self.category_sums is None:
            return None

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞.
        await self._send_report()
        if self.report_text:
            return self.report_text     # –í–µ—Ä–Ω–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
        else:
            return None


    async def _get_month(self):
        args = self.message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
        # TODO —Ç—É—Ç –∏–¥–µ—Ç –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        self.current_year = datetime.now().year  # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if len(args) < 2:
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
            self.month_number = datetime.now().month
            # –ü–æ–ª—É—á–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            self.month_name = list(MONTH_MAP.keys())[list(MONTH_MAP.values()).index(self.month_number)]
            await self.message.reply(f"–ú–µ—Å—è—Ü –Ω–µ —É–∫–∞–∑–∞–Ω. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç –∑–∞ {self.month_name.capitalize()} {self.current_year} –≥–æ–¥–∞.")
        else:
            # –ï—Å–ª–∏ –º–µ—Å—è—Ü —É–∫–∞–∑–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
            self.month_name = args[1].lower()
            self.month_number = MONTH_MAP.get(self.month_name)
            if self.month_number is None:
                await self.message.reply(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—è—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∏—é–ª—å')."
                )
                return

    async def _get_notes(self):
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ CRUD –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.notes = await self.crud_func(
            conn=self.db_conn,
            user_tg_id=self.user_id,
            month=self.month_number,
            year=self.current_year      # TODO –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        )

        if not self.notes:
            await self.message.reply(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è {self.month_name.capitalize()} {self.current_year} –≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

    async def _process_notes(self):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ (self.notes) –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {category: total_sum}.
        """
        for note in self.notes:
            try:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'summ' –∏ 'category' - –∫–ª—é—á–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ note
                summ_float = float(note['summ'])
                category = note['category']
                self.category_sums[category] = self.category_sums.get(category, 0.0) + summ_float
            except (ValueError, TypeError, KeyError) as e:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                print(f"Warning: Failed to process note: {note}. Error: {e}")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à logger
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
                continue

    async def _send_report(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞.
        """
        if not self.category_sums:
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö),
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            await self.message.reply(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è **{self.month_name.capitalize()} {self.current_year}** –≥–æ–¥–∞."
            )
            # return "–û—Ç—á–µ—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—É–º–º."

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        self.report_text = (
            f"–í–∞—à –æ—Ç—á–µ—Ç –∑–∞ {self.month_name.capitalize()} {self.current_year} –≥–æ–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"
        )
        total_report_summ = 0.0

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π)
        sorted_sums = sorted(self.category_sums.items(), key=lambda item: item[1], reverse=True)

        for category, summ in sorted_sums:
            sum_as_int = int(summ)
            self.report_text += f"üè∑Ô∏è {category.capitalize()}: {sum_as_int} —Ä—É–±.\n"
            total_report_summ += summ

        total_report_summ_int = int(total_report_summ)
        self.report_text += f"\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {total_report_summ_int} —Ä—É–±."
        # self.report_text += f"\n{'–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:'} {f'{total_report_summ:.2f}'} —Ä—É–±."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.message.reply(self.report_text)

        # return self.report_text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
